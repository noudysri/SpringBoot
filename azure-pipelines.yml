trigger: none

pr: none

pool:
  vmimage: ubuntu-latest

# schedules:
# - cron: "0 2 1-7 * SUN"
#   displayName: 25th 5:30 AM (IST) Every Month
#   branches:
#     include:
#     - master

# - task: PowerShell@2
#   displayName: 'Install Az module'
#   inputs:
#     targetType: 'inline'
#     script: 'Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser'

# - task: PowerShell@2
#   displayName: 'Install Az module'
#   inputs:
#     targetType: 'inline'
#     script: 'Install-Module -Name Az -AllowClobber -Scope CurrentUser'

stages:
- stage: 
  jobs:
    - job:
      steps:
      # - task: PowerShell@2
      #   displayName: 'Install Az module'
      #   inputs:
      #     targetType: 'inline'
      #     script: 'Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser'
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            # Write your commands here     
            $PSExecutionPolicyPreference = 'RemoteSigned'

      - task: PowerShell@2
        displayName: 'Install Az module'
        inputs:
          targetType: 'inline'
          script: 'Install-Module -Name Az.Storage -AllowClobber -Scope CurrentUser'

      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            $StorageAccountName="mystorage616"  
            $ResourceGroupName="MYNEWRG6"  
            $fileshareName = "filetodelete"  
            
              $StorageAccountAccessKey = Get-AzStorageAccountKey -ResourceGroupName $ResourceGroupName -AccountName $StorageAccountName | Where-Object {$_.KeyName -eq "key1"}  
            
              $ctx = New-AzStorageContext -StorageAccountName $StorageAccountName -StorageAccountKey $StorageAccountAccessKey.Value  
            
            $DirIndex = 0  
            $dirsToList = New-Object System.Collections.Generic.List[System.Object]  
              
            # Get share root Dir  
            $shareroot = Get-AzStorageFile -ShareName $shareName -Path . -context $ctx   
            $dirsToList += $shareroot   
              
            # List files recursively and remove file older than 90 days   
            While ($dirsToList.Count -gt $DirIndex)  
            {  
                $dir = $dirsToList[$DirIndex]  
                $DirIndex ++  
                $fileListItems = $dir | Get-AzStorageFile  
                $dirsListOut = $fileListItems | where {$_.GetType().Name -eq "AzureStorageFileDirectory"}  
                $dirsToList += $dirsListOut  
                $files = $fileListItems | where {$_.GetType().Name -eq "AzureStorageFile"}  
              
                foreach($file in $files)  
                {  
                    # Fetch Attributes of each file and output  
                    $task = $file.CloudFile.FetchAttributesAsync()  
                    $task.Wait()  
              
                    # remove file if it's older than 94 days.  
                    if ($file.CloudFile.Properties.LastModified -lt (9Get-Date).AddDays(0))  
                    {  
                  Write-Host "file :",$file.Name  "is older than 0 days so removing it ..!"   
                        ## print the file LMT  
                        # $file | Select @{ Name = "Uri"; Expression = { $_.CloudFile.SnapshotQualifiedUri} }, @{ Name = "LastModified"; Expression = { $_.CloudFile.Properties.LastModified } }   
              
                        # remove file  
                        $file | Remove-AzStorageFile  
                    }  
                }  
                #Debug log  
                # Write-Host  $DirIndex $dirsToList.Length  $dir.CloudFileDirectory.SnapshotQualifiedUri.ToString()   
            }

# steps:
#   - task: PowerShell@2
#     inputs:     
#      filePath: "./$(System.DefaultWorkingDirectory)/_noudysri_Ansible-Windows/powershellscript.ps1"

#   # - stage: install the script
#   #   jobs:
#   #     - job: installer
#   #       steps:
#   #       - task: ShellScript@2
#   #         inputs:
#   #           scriptPath: 'install.sh'       

#   # - stage: Start the script
#   #   jobs:
#   #     - job: installer
#   #       steps:
#   #       - task: ShellScript@2
#   #         inputs:
#   #           scriptPath: 'start.sh' 

#   # - stage: Deply to static web
#   #   jobs:
#   #    - job: deploy
#   #      steps:
#   #      - task: AzureStaticWebApp@0
#   #        inputs:
#   #          app_location: 'fe-asda-mock-test/install'
#   #          output_location: 'private'
#   #          azure_static_web_apps_api_token: 'abcd'

