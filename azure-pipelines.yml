# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  # dockerRegistryServiceConnection: '175a0de1-336f-4df9-b61b-80d3cb8d1c66'
  # imageRepository: 'gouravpatelspringboot'
  # containerRegistry: 'acrgourav.azurecr.io'
  # dockerfilePath: '**/Dockerfile'
  # tag: '$(Build.BuildId)'
  # imagePullSecret: 'acrgourav687d-auth'

  # Agent VM image name
  vmImageName: 'windows-latest'
  

stages:
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:

    # - task: Maven@3
    #   inputs:
    #     mavenPomFile: 'pom.xml'
    #     publishJUnitResults: true
    #     testResultsFiles: '**/surefire-reports/TEST-*.xml'
    #     javaHomeOption: 'JDKVersion'
    #     mavenVersionOption: 'Default'
    #     mavenAuthenticateFeed: false
    #     effectivePomSkip: false
    #     sonarQubeRunAnalysis: false
    # - task: CopyFiles@2
    #   inputs:
    #     SourceFolder: '$(system.defaultworkingdirectory)'
    #     Contents: '**/*.jar'
    #     TargetFolder: '$(build.artifactstagingdirectory)'

    # - task: PublishBuildArtifacts@1
    #   inputs:
    #     PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    #     ArtifactName: 'demo'
    #     publishLocation: 'Container'
    # - task: Docker@2
    #   displayName: Build and push an image to container registry
    #   inputs:
    #     command: buildAndPush
    #     repository: $(imageRepository)
    #     dockerfile: $(dockerfilePath)
    #     containerRegistry: $(dockerRegistryServiceConnection)
    #     tags: |
    #       $(tag)
          
    # - upload: manifests
    #   artifact: manifests

# - stage: Deploy
#   displayName: Deploy stage
#   dependsOn: Build

#   jobs:
#   - deployment: Deploy
#     displayName: Deploy
#     pool:
#       vmImage: $(vmImageName)
#     environment: 'gouravpatel1996SpringBoot-1214.kube-public'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: KubernetesManifest@0
#             displayName: Create imagePullSecret
#             inputs:
#               action: createSecret
#               secretName: $(imagePullSecret)
#               dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
              
#           - task: KubernetesManifest@0
#             displayName: Deploy to Kubernetes cluster
#             inputs:
#               action: deploy
#               manifests: |
#                 $(Pipeline.Workspace)/manifests/deployment.yml
#                 $(Pipeline.Workspace)/manifests/service.yml
#               imagePullSecrets: |
#                 $(imagePullSecret)
#               containers: |
#                 $(containerRegistry)/$(imageRepository):$(tag)

    - task: Docker@2
      inputs:
        containerRegistry: 'venkeyconn'
        repository: 'venkeyrepo'
        command: 'buildAndPush'
        Dockerfile: 'SpringBoot/Dockerfile'
      